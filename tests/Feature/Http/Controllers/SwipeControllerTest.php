<?php

namespace Tests\Feature\Http\Controllers;

use App\Domain\Swipe\Repositories\SwipeRepositoryInterface;
use App\Domain\User\Repositories\UserRepositoryInterface;
use Database\Factories\UserFactory;
use Faker\Factory as FakerFactory;
use Tests\TestCase;
use Tymon\JWTAuth\Facades\JWTAuth;

class SwipeControllerTest extends TestCase
{

    private UserRepositoryInterface $userRepository;
    private SwipeRepositoryInterface $swipeRepository;

    protected function setUp(): void
    {
        parent::setUp();
        $this->userRepository = $this->app->make(UserRepositoryInterface::class);
        $this->swipeRepository = $this->app->make(SwipeRepositoryInterface::class);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test_right_swipe()
    {
        $swiper = (new UserFactory(FakerFactory::create(), $this->pdoInstance))->createAndPersist(['password' => '1234']);
        $swiped = (new UserFactory(FakerFactory::create(), $this->pdoInstance))->createAndPersist(['password' => '1234']);
        $token = JWTAuth::fromUser($swiper);

        $response = $this->withHeader('Authorization', "Bearer $token")
            ->post('/api/swipes/right', ['swiped_id' => $swiped->getId()]);

        $response->assertStatus(200)
            ->assertJson([
                'data' => [
                    'swiper_id' => $swiper->getId(),
                    'swiped_id' => $swiped->getId(),
                    'liked' => true,
                ],
            ]);
    }

    public function test_left_swipe()
    {
        $swiper = (new UserFactory(FakerFactory::create(), $this->pdoInstance))->createAndPersist(['password' => '1234']);
        $swiped = (new UserFactory(FakerFactory::create(), $this->pdoInstance))->createAndPersist(['password' => '1234']);
        $token = JWTAuth::fromUser($swiper);

        $response = $this->withHeader('Authorization', "Bearer $token")
            ->post('/api/swipes/left', ['swiped_id' => $swiped->getId()]);

        $response->assertStatus(200)
            ->assertJson([
                'data' => [
                    'swiper_id' => $swiper->getId(),
                    'swiped_id' => $swiped->getId(),
                    'liked' => false,
                ],
            ]);
    }
}
