<?php

namespace Tests\Feature\Http\Controllers;

use App\Domain\User\Repositories\UserRepositoryInterface;
use Database\Factories\UserFactory;
use Database\migrations\ProfileImageService;
use Faker\Factory as FakerFactory;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use Tymon\JWTAuth\Facades\JWTAuth;

class ProfileImageControllerTest extends TestCase
{
    use WithFaker;

    private UserRepositoryInterface $userRepository;
    private ProfileImageService $profileImageService;

    protected function setUp(): void
    {
        parent::setUp();
        $this->userRepository = $this->createMock(UserRepositoryInterface::class);
        $this->profileImageService = $this->createMock(ProfileImageService::class);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test_upload()
    {
        $user = (new UserFactory(FakerFactory::create(), $this->pdoInstance))->createAndPersist(['password' => '1234']);
        $token = JWTAuth::fromUser($user);
        $file = UploadedFile::fake()->image('profile.jpg');

        $this->userRepository->expects($this->once())->method('getUserById')->with($user->getId())->willReturn($user);
        $this->profileImageService->expects($this->once())->method('upload')->with($file)->willReturn('path/to/profile.jpg');
        $this->userRepository->expects($this->once())->method('addProfileImage')->with($user->getId(), 'path/to/profile.jpg');


        $response = $this->withHeader('Authorization', "Bearer $token")
            ->post('/api/user/profile-image', ['image' => $file]);

        $response->assertStatus(200)
            ->assertJson(['message' => '画像がアップロードされました。', 'path' => 'path/to/profile.jpg']);
    }

    public function test_upload_and_delete_profile_image()
    {
        $user = (new UserFactory(FakerFactory::create(), $this->pdoInstance))->createAndPersist(['password' => '1234']);
        $token = JWTAuth::fromUser($user);

        // Upload the image
        $file = UploadedFile::fake()->image('profile.jpg');
        $uploadResponse = $this->withHeader('Authorization', "Bearer $token")
            ->post('/api/user/profile-image', ['image' => $file]);

        $uploadResponse->assertStatus(200);

        // Get the uploaded profile image
        $profileImage = DB::table('profile_images')->first();

        // Delete the image
        $this->userRepository->expects($this->once())->method('getUserById')->with($user->getId())->willReturn($user);
        $this->userRepository->expects($this->once())->method('getProfileImagePathById')->with($user->getId());
        $this->profileImageService->expects($this->once())->method('delete');
        $this->userRepository->expects($this->once())->method('removeProfileImage');

        $deleteResponse = $this->withHeader('Authorization', "Bearer $token")
            ->delete('/api/user/profile-image/' . $profileImage->id);

        $deleteResponse->assertStatus(200)
            ->assertJson([
                'message' => '画像が削除されました。'
            ]);
    }
}
